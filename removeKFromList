Note: Try to solve this task in O(n) time using O(1) additional space, where n is the number of elements in the list, since this is what you'll be asked to do during an interview.

Given a singly linked list of integers l and an integer k, remove all elements from list l that have a value equal to k.

Example

For l = [3, 1, 2, 3, 4, 5] and k = 3, the output should be
removeKFromList(l, k) = [1, 2, 4, 5];
For l = [1, 2, 3, 4, 5, 6, 7] and k = 10, the output should be
removeKFromList(l, k) = [1, 2, 3, 4, 5, 6, 7].
Input/Output

[time limit] 3000ms (cs)
[input] linkedlist.integer l

A singly linked list of integers.

Guaranteed constraints:
0 ≤ list size ≤ 105,
-1000 ≤ element value ≤ 1000.

[input] integer k

An integer.

Guaranteed constraints:
-1000 ≤ k ≤ 1000.

[output] linkedlist.integer

Return l with all the values equal to k removed.

Code:

// Definition for singly-linked list:
// class ListNode<T> {
//   public T value { get; set; }
//   public ListNode<T> next { get; set; }
// }
//
ListNode<int> removeKFromList(ListNode<int> l, int k) {
    ListNode<int> nd;
    
    if (l==null) { return l; }
    
    while (l.value == k) 
    {
        if (l.next == null) { return null; }
        l = l.next;
    }
    
    nd=l;
    
    while (nd.next != null)
    {
        if (nd.next.value==k)
        {
            while (nd.next.value==k) 
            {
                if (nd.next.next != null) { nd.next = nd.next.next; }    
                else { nd.next=null; break; }
            }
        }
        
        if (nd.next != null) { nd=nd.next; }
    }
    
    return l;
}

Fails the following test:
Input: [3,5,1,1,7,4]; k=1
Expected output: [3,5,7,4]
My output: [3,5,1,7,4]
